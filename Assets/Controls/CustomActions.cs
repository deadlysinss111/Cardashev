//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/CustomActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""4963b5e1-f748-44ab-8da8-b20d7aa48337"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Value"",
                    ""id"": ""cdf76f82-2e3e-44b0-80b4-05d927d8e1e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""5af59fdf-787a-400f-bf73-ff46ac8aec08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""c0251a30-0490-4a0d-b1e9-6a7e1f2ba005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ultimate"",
                    ""type"": ""Value"",
                    ""id"": ""a9c57a1f-fd43-4099-bc12-2f214e8ccf89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMode"",
                    ""type"": ""Button"",
                    ""id"": ""84df5206-91f2-4f7a-ae54-e6223a071301"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""9f26c795-27ce-4286-b9c5-e2458bf3f370"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""1a990ab6-2523-4700-bc5c-86813daaaf23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""c15e2390-db7b-44ab-b842-2844148307c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68e78a89-ab9b-4e61-87e8-6b781406a0fc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcd99931-0c3e-4651-9aaa-aee9f4ee6f19"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe66b46b-d892-4cd3-8208-cb0449dadb86"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20426477-d11c-4d1c-b465-e12548bdb421"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ultimate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e2adef1-ce97-4fa5-a7d7-0fb66fe7e452"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Camera"",
                    ""id"": ""4ef1f50e-c5f9-4aa1-aa11-722298b933ef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4e6925f7-473e-4a86-aa74-a95f484fa71d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6b11ac06-a7ae-4af6-a617-2f4ebc758554"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""37925d5e-781a-4bd9-aeeb-d6a9d55c72cb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8222f59d-d06d-4f21-98b2-071b2e982134"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b6e55e28-e377-470c-bd3f-61dbea54632b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c50c7d4a-bdc0-4772-a107-46ebfb9d0970"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_LeftClick = m_Main.FindAction("LeftClick", throwIfNotFound: true);
        m_Main_RightClick = m_Main.FindAction("RightClick", throwIfNotFound: true);
        m_Main_Focus = m_Main.FindAction("Focus", throwIfNotFound: true);
        m_Main_Ultimate = m_Main.FindAction("Ultimate", throwIfNotFound: true);
        m_Main_CameraMode = m_Main.FindAction("CameraMode", throwIfNotFound: true);
        m_Main_CameraMove = m_Main.FindAction("CameraMove", throwIfNotFound: true);
        m_Main_CameraRotateLeft = m_Main.FindAction("CameraRotateLeft", throwIfNotFound: true);
        m_Main_CameraRotateRight = m_Main.FindAction("CameraRotateRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_LeftClick;
    private readonly InputAction m_Main_RightClick;
    private readonly InputAction m_Main_Focus;
    private readonly InputAction m_Main_Ultimate;
    private readonly InputAction m_Main_CameraMode;
    private readonly InputAction m_Main_CameraMove;
    private readonly InputAction m_Main_CameraRotateLeft;
    private readonly InputAction m_Main_CameraRotateRight;
    public struct MainActions
    {
        private @CustomActions m_Wrapper;
        public MainActions(@CustomActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_Main_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_Main_RightClick;
        public InputAction @Focus => m_Wrapper.m_Main_Focus;
        public InputAction @Ultimate => m_Wrapper.m_Main_Ultimate;
        public InputAction @CameraMode => m_Wrapper.m_Main_CameraMode;
        public InputAction @CameraMove => m_Wrapper.m_Main_CameraMove;
        public InputAction @CameraRotateLeft => m_Wrapper.m_Main_CameraRotateLeft;
        public InputAction @CameraRotateRight => m_Wrapper.m_Main_CameraRotateRight;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @Focus.started += instance.OnFocus;
            @Focus.performed += instance.OnFocus;
            @Focus.canceled += instance.OnFocus;
            @Ultimate.started += instance.OnUltimate;
            @Ultimate.performed += instance.OnUltimate;
            @Ultimate.canceled += instance.OnUltimate;
            @CameraMode.started += instance.OnCameraMode;
            @CameraMode.performed += instance.OnCameraMode;
            @CameraMode.canceled += instance.OnCameraMode;
            @CameraMove.started += instance.OnCameraMove;
            @CameraMove.performed += instance.OnCameraMove;
            @CameraMove.canceled += instance.OnCameraMove;
            @CameraRotateLeft.started += instance.OnCameraRotateLeft;
            @CameraRotateLeft.performed += instance.OnCameraRotateLeft;
            @CameraRotateLeft.canceled += instance.OnCameraRotateLeft;
            @CameraRotateRight.started += instance.OnCameraRotateRight;
            @CameraRotateRight.performed += instance.OnCameraRotateRight;
            @CameraRotateRight.canceled += instance.OnCameraRotateRight;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @Focus.started -= instance.OnFocus;
            @Focus.performed -= instance.OnFocus;
            @Focus.canceled -= instance.OnFocus;
            @Ultimate.started -= instance.OnUltimate;
            @Ultimate.performed -= instance.OnUltimate;
            @Ultimate.canceled -= instance.OnUltimate;
            @CameraMode.started -= instance.OnCameraMode;
            @CameraMode.performed -= instance.OnCameraMode;
            @CameraMode.canceled -= instance.OnCameraMode;
            @CameraMove.started -= instance.OnCameraMove;
            @CameraMove.performed -= instance.OnCameraMove;
            @CameraMove.canceled -= instance.OnCameraMove;
            @CameraRotateLeft.started -= instance.OnCameraRotateLeft;
            @CameraRotateLeft.performed -= instance.OnCameraRotateLeft;
            @CameraRotateLeft.canceled -= instance.OnCameraRotateLeft;
            @CameraRotateRight.started -= instance.OnCameraRotateRight;
            @CameraRotateRight.performed -= instance.OnCameraRotateRight;
            @CameraRotateRight.canceled -= instance.OnCameraRotateRight;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnFocus(InputAction.CallbackContext context);
        void OnUltimate(InputAction.CallbackContext context);
        void OnCameraMode(InputAction.CallbackContext context);
        void OnCameraMove(InputAction.CallbackContext context);
        void OnCameraRotateLeft(InputAction.CallbackContext context);
        void OnCameraRotateRight(InputAction.CallbackContext context);
    }
}
